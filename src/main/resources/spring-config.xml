<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations"> <!--多个属性文件-->
            <list>
                <value>classpath:db.properties</value>
            </list>
        </property>
        <property name="ignoreResourceNotFound" value="true"/>
    </bean>

    <!--数据源连接池-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">

        <property name="url" value="${url}"/>
        <property name="username" value="${username}"/>
        <property name="password" value="${password}"/>
        <property name="driverClassName" value="${driverClassName}"/>

        <!-- 属性类型是字符串，通过别名的方式配置扩展插件，
			常用的插件有：监控统计用的filter:stat 日志用的filter:log4j 防御sql注入的filter:wall -->
        <property name="filters" value="${filters}"/>
        <!-- 最大连接池数量 -->
        <property name="maxActive" value="${maxActive}"/>
        <!-- 初始化时建立物理连接的个数。初始化发生在显示调用init方法，
			  或者第一次getConnection时 -->
        <property name="initialSize" value="${initialSize}"/>
        <!-- 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，
			  缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁 -->
        <property name="maxWait" value="${maxWait}"/>
        <!-- 最小连接池数量 -->
        <property name="minIdle" value="${minIdle}"/>
        <!-- 有两个含义：1.Destroy线程会检测连接的间隔时间
          2.testWhileIdle的判断依据，详细看testWhileIdle属性的说明 -->
        <property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}"/>
        <!-- Destory线程中如果检测到当前连接的最后活跃时间和当前时间的差值大于
				minEvictableIdleTimeMillis，则关闭当前连接 -->
        <property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}"/>
        <!-- 用来检测连接是否有效的sql，要求是一个查询语句。
          如果validationQuery为null，testOnBorrow、testOnReturn、
          testWhileIdle都不会其作用。在mysql中通常为select 'x'，在oracle中通常为
          select 1 from dual -->
        <property name="validationQuery" value="${validationQuery}"/>
        <!-- 建议配置为true，不影响性能，并且保证安全性。
			  申请连接的时候检测，如果空闲时间大于 timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效 -->
        <property name="testWhileIdle" value="${testWhileIdle}"/>
        <!-- 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
        <property name="testOnBorrow" value="${testOnBorrow}"/>
        <!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
        <property name="testOnReturn" value="${testOnReturn}"/>
        <!-- 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。
		在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100 -->
        <property name="maxOpenPreparedStatements" value="${maxOpenPreparedStatements}"/>
        <!-- 对于建立时间超过removeAbandonedTimeout的连接强制关闭  -->
        <property name="removeAbandoned" value="${removeAbandoned}"/> <!-- 打开removeAbandoned功能 -->
        <!-- 指定连接建立多长时间就需要被强制关闭  -->
        <property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}"/> <!-- 1800秒，也就是30分钟 -->
        <!-- 指定发生removeabandoned的时候，是否记录当前线程的堆栈信息到日志中 -->
        <property name="logAbandoned" value="${logAbandoned}"/> <!-- 关闭abanded连接时输出错误日志 -->
    </bean>

    <!--
        mybatis中，SqlSessionFactory是产生SqlSession的基础;
        MyBatis-Spring中提供了SqlSessionFactoryBean支持SqlSessionFactory的配置；
        SqlSessionFactoryBean几乎可以配置所有Mybatis的组件，且提供了setter()让Spring设置；
    -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml" />
        <property name="mapperLocations" value="classpath:*Mapper.xml"/>
    </bean>

    <!--
        SqlSessionTemplate并不是一个必须配置的组件，但是它是线程安全的，
        则可以确保每个线程使用的SqlSession唯一不会冲突；
        还有SqlSessionTemplate自己提供了一些crud方法，不过这些几乎不用了；

    -->
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg ref="sqlSessionFactory"/>
<!--        <constructor-arg value="BATCH"/>-->
        <!--
            SqlSessionTemplate允许配置执行器类型，
            同时配置了sqlSessionFactory和sqlSessionTemplate，sqlSessionTemplate优先级大；
        -->
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.gujun.dao"/>
<!--        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>-->
        <!--sqlSessionTemplateBeanName将覆盖sqlSessionFactoryBeanName的-->
        <property name="sqlSessionTemplateBeanName" value="sqlSessionTemplate"/>
        <!--指定标注该注解才扫描成mapper-->
        <property name="annotationClass" value="org.springframework.stereotype.Repository"/>
    </bean>

</beans>